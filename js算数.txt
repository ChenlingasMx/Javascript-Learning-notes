1.处理数值的典型情景是算数。
JavaScript 算数运算符

算术运算符对数值（文字或变量）执行算术运算。
 
运算符		描述
 
+		加法
 
-		减法
 
*		乘法
 
**		幂（ES2016）

/		除法
 
%		系数
 
++		递增
 
--		递减
 

2.算数运算符

典型的算术运算会操作两个数值。

这两个数可以是字面量：

实例
var x = 7 + 8; //15

或变量：

实例
var x = a + b;

或表达式：

实例
var x = (7 + 8) * a;


3.运算符和操作数

在算术运算中，数被称为操作数。

（两个操作数之间执行的）运算由运算符定义。
操作数	运算符	操作数
 
7	+	8


4.加法

加法运算符（+）加数：
var x = 7;
var y = 8;
var z = x + y; 


5.减法

减法运算符（-）减数。
var x = 7;
var y = 8;
var z = x - y; 


6.乘法

乘法运算符（*）乘数。
var x = 7;
var y = 8;
var z = x * y; 
	

7.除法

除法运算符（/）除数。
var x = 7;
var y = 2;
var z = x / y; 

8.系数(模运算)

系数运算符（%）返回除法的余数。
var x = 7;
var y = 2;
var z = x % y; //1


注释：在算术中，两个整数的除法产生商和余数。

注释：在数学中，模运算的结果是算术除法的余数。


9.递增

递增运算符（++）对数值进行递增。
var x = 7;
x++;
var z = x; //8

10.递减

递减运算符（--）对数值进行递减。
var x = 7;
x--;
var z = x; //6

11.幂

取幂运算符（**）将第一个操作数提升到第二个操作数的幂。

实例
var x = 5;
var z = x ** 2;          // 结果是 25


x ** y 产生的结果与 Math.pow(x,y) 相同:

实例
var x = 5;
var z = Math.pow(x,2);   // 结果是 25


12.运算符优先级

运算符优先级（Operator precedence）描述了在算术表达式中所执行操作的顺序。

实例
var x = 200 + 50 * 2;//300


在传统的学校数学中，乘法是优先的。

乘法（*）和除法（%）比加法（+）和减法（-）拥有更高的优先级。

同时，（就像在学校的数学中那样）能够通过使用括号来改变优先级：

实例
var x = (200 + 50) * 2; //500


当使用括号时，括号中的运算符会首先被计算。

当多个运算拥有相同的优先级时（比如加法和减法），对它们的计算是从左向右的：

实例
var x = 200 + 50 - 2; //248


