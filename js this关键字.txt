

1.this 是什么？
JavaScript this 关键词指的是它所属的对象。

它拥有不同的值，具体取决于它的使用位置：

在方法中，this 指的是所有者对象。
单独的情况下，this 指的是全局对象。
在函数中，this 指的是全局对象。
在函数中，严格模式下，this 是 undefined。
在事件中，this 指的是接收事件的元素。
像 call() 和 apply() 这样的方法可以将 this 引用到任何对象。

2.方法中的 this
在对象方法中，this 指的是此方法的“拥有者”。

下面的例子中，this 指的是 p 对象。

p 对象是 xm 方法的拥有者。

<!DOCTYPE html>
JavaScript this 关键词
<html>
<body>

<h1>JavaScript <b>this</b> 关键词</h1>

<p>在本例中，<b>this</b> 代表 <b>person</b> 对象。</p>

<p>因为 p 对象“拥有”zm 方法。</p>

<p id="demo"></p>

<script>
var p={
xing:"aaaaa",
ming:"bbbbb",
xm:function(){
return this.xing+" "+this.ming;
}

}
document.getElementById("demo").innerHTML=p.xm();

</script>

</body>
</html>//aaaaa	bbbbb


3.单独的 this
在单独使用时，拥有者是全局对象，因此 this 指的是全局对象。

在浏览器窗口中，全局对象是 [object Window]：

实例

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript <b>this</b> 关键词</h1>

<p>在本例中，<b>this</b> 引用 window 对象：</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = this;
</script>

</body>
</html>//[obiect window]



4.在严格模式中，如果单独使用，那么 this 指的是全局对象 [object Window]：

实例
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript <b>this</b> 关键词</h1>

<p>在本例中，<b>this</b> 引用 window 对象：</p>

<p id="demo"></p>

<script>
"use strict"
var x=this
document.getElementById("demo").innerHTML = x;
</script>

</body>
</html>//[obiect window]




5.函数中的 this（默认）
在 JavaScript 函数中，函数的拥有者默认绑定 this。

因此，在函数中，this 指的是全局对象 [object Window]。

实例
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript <b>this</b> 关键词</h1>

<p>在本例中，<b>this</b> 代表“拥有” myFunction 的对象：</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = myFunction();
function myFunction() {
  return this;
}
</script>

</body>
</html>


6.函数中的 this（严格模式）
JavaScript 严格模式不允许默认绑定。

因此，在函数中使用时，在严格模式下，this 是未定义的（undefined）。

实例
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript <b>this</b> 关键词</h1>

<p>在本例中，<b>this</b> 代表“拥有” myFunction 的对象：</p>

<p id="demo"></p>

<script>
"use strict"
var a=this;
document.getElementById("demo").innerHTML = myFunction();
function myFunction() {
  return a;
}
</script>

</body>
</html>


7.事件处理程序中的 this
在 HTML 事件处理程序中，this 指的是接收此事件的 HTML 元素：

实例
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript <b>this</b> 关键词</h1>

<button onclick="this.style.display='none'">单击来删除我！</button>

</body>
</html>

8.对象方法绑定
在此例中，this 是 person 对象（person 对象是该函数的“拥有者”）：

实例
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>
<script>
var p={
x:"hhh",
m:"ggg",
xm:function(){
return this;

}

}
document.getElementById("demo").innerHTML=p.xm();

</script>

</body>
</html>//[object Object]

例子：
<!DOCTYPE html>
<html>
<body>

<p id="demo"></p>
<script>
var p={
x:"hhh",
m:"ggg",
xm:function(){
return this.x+" "+this.m;

}

}
document.getElementById("demo").innerHTML=p.xm();

</script>

</body>
</html>//[object Object]
换句话说，this.x 意味着 this（person）对象的 x 属性。


9.显式函数绑定
call() 和 apply() 方法是预定义的 JavaScript 方法。

它们都可以用于将另一个对象作为参数调用对象方法。

您可以在本教程后面阅读有关 call() 和 apply() 的更多内容。

在下面的例子中，当使用 person2 作为参数调用 person1.fullName 时，this 将引用 person2，即使它是 person1 的方法：

实例
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript <b>this</b> 关键词</h1>

<p>在本例中，<strong>this</strong> 引用 person2，即使它是 person1 的方法：</p>

<p id="demo"></p>

<script>
var person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person2 = {
  firstName:"Bill",
  lastName: "Gates",
}

document.getElementById("demo").innerHTML = person1.fullName.call(person2); 
</script>

</body>
</html>//Bill  Gates

