1.JavaScript 正则表达式

正则表达式是构成搜索模式的字符序列。

该搜索模式可用于文本搜索和文本替换操作。


2.什么是正则表达式？
正则表达式是构成搜索模式（search pattern）的字符序列。

当您搜索文本中的数据时，您可使用搜索模式来描述您搜索的内容。

正则表达式可以是单字符，或者更复杂的模式。

正则表达式可用于执行所有类型的文本搜索和文本替换操作。

语法
/pattern/modifiers;
实例
var patt = /w3school/i;
例子解释：
/w3school/i 是一个正则表达式。

w3school 是模式（pattern）（在搜索中使用）。

i 是修饰符（把搜索修改为大小写不敏感）。



3.使用字符串方法
在 JavaScript 中，正则表达式常用于两个字符串方法：search() 和 replace()。

search() 方法使用表达式来搜索匹配，然后返回匹配的位置。

replace() 方法返回模式被替换处修改后的字符

4.使用字符串方法 search() 来处理字符串
search() 方法也接受字符串作为搜索参数。字符串参数将被转换为正则表达式：

实例
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript 字符串方法</h1>

<p>在字符串中搜索“W3School”，并显示匹配的位置：</p>

<p id="demo"></p>

<script>
var str = "Visit W3School!"; 
var n = str.search("W3School");
document.getElementById("demo").innerHTML = n;
</script>

</body>
</html>//6

在字符串方法 search() 中使用正则表达式
实例
使用正则表达式执行搜索字符串中 "w3school" 的大小写不敏感的搜索：
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript 字符串方法</h1>

<p>在字符串中搜索“W3School”，并显示匹配的位置：</p>

<p id="demo"></p>

<script>
var str = "Visit W3School!"; 
var n = str.search(/W3School/i);
document.getElementById("demo").innerHTML = n;
</script>

</body>
</html>//6


5.使用字符串方法 replace() 处理字符串
replace() 也接受字符串作为搜索参数：
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript 字符串方法</h1>

<p>在字符串中搜索“W3School”，并显示匹配的位置：</p>

<p id="demo"></p>

<script>
var str = "Visit W3School!"; 
var n = str.replace("W3School!","hhhhh");
document.getElementById("demo").innerHTML = n;
</script>

</body>
</html>// Visit hhhhh

在字符串方法 replace() 中使用正则表达式

使用大小写不明的正则表达式以 W3school 来替换字符串中的 Microsoft：

例子：

<!DOCTYPE html>
<html>
<body>

<h1>JavaScript 字符串方法</h1>

<p>在字符串中搜索“W3School”，并显示匹配的位置：</p>

<p id="demo"></p>

<script>
var str = "Visit W3School!"; 
var n = str.replace(/w3School/i,"hhhhh");
document.getElementById("demo").innerHTML = n;
</script>

</body>
</html>//Visit hhhhh!

您注意到了吗？
正则表达式参数（而不是字符串参数）可以在上面的方法中使用。

正则表达式可以使您的搜索更强大（例如，不区分大小写）。



6.正则表达式修饰符
修饰符可用于大小写不敏感的更全局的搜素：

修饰符	描述
i	执行对大小写不敏感的匹配。	

例子：
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript 字符串方法</h1>

<p>在字符串中搜索“W3School”，并显示匹配的位置：</p>

<p id="demo"></p>

<script>
var str = "Visit W3School!"; 
var n = str.replace(/w3School/i,"hhhhh");
document.getElementById("demo").innerHTML = n;
</script>

</body>
</html>

g	执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。	

例子：
<!DOCTYPE html>
<html>
<body>

<h1>JavaScript 字符串方法</h1>

<p>在字符串中搜索“W3School”，并显示匹配的位置：</p>

<p id="demo"></p>

<script>
var str = "Visit W3School   gggg  W3School aa W3School!"; 
var n = str.match(/w3School/g);
document.getElementById("demo").innerHTML = n;
</script>

</body>
</html>//将显示3个w3School，W3School,W3School,W3School

m	执行多行匹配。	试一试


<!DOCTYPE html>
<html>
<body>

<p>请单击按钮，在字符串中每行的开头对“is”进行多行搜索。</p>

<button onclick="myFunction()">试一试</button>

<p id="demo"></p>

<script>
function myFunction() {
  var str = "\nIs th\nis it?";
  var patt1 = /^is/m;
  var result = str.match(patt1);
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>//显示is


注意：match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。

该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。



7.正则表达式模式
括号用于查找一定范围的字符串：

表达式	描述
[abc]	查找方括号之间的任何字符。	

例子：
<!DOCTYPE html>
<html>
<body>

<p>请单击按钮，对字符串中的字符“h”进行全局搜索。</p>

<button onclick="myFunction()">试一试</button>

<p id="demo"></p>

<script>
function myFunction() {
  var str = "Is this all there is?";
  var patt1 = /[h]/g; 
  var result = str.match(patt1);
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>//h,h


[0-9]	查找任何从 0 至 9 的数字。	

例子：
<!DOCTYPE html>
<html>
<body>

<p>请单击按钮，字符串中的数字 1 到 4 进行全局搜索。</p>

<button onclick="myFunction()">试一试</button>

<p id="demo"></p>

<script>
function myFunction() {
  var str = "123456789";
  var patt1 = /[1-4]/g;
  var result = str.match(patt1);
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>//1,2,3,4


(x|y)	查找由 | 分隔的任何选项。

例子：
<!DOCTYPE html>
<html>
<body>

<p>请单击按钮，可以对任何指定的备选项进行全局搜索（红色|绿色）。</p>

<button onclick="myFunction()">试一试</button>

<p id="demo"></p>

<script>
function myFunction() {
  var str = "re, green, red, green, gren, gr, blue, yellow";
  var patt1 = /(red|green)/g;
  var result = str.match(patt1);
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>//green, red, green


8.元字符（Metacharacter）是拥有特殊含义的字符：

元字符	描述
\d	查找数字。	

例子：
<!DOCTYPE html>
<html>
<body>

<p>请单击按钮,全局搜索数字。</p>

<button onclick="myFunction()">试一试</button>

<p id="demo"></p>

<script>
function myFunction() {
  var str = "abc123";
  var patt1 = /\d/g;
  var result = str.match(patt1);
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>//1,2,3

\s	查找空白字符。	

<!DOCTYPE html>
<html>
<body>

<p>请单击按钮,全局搜索数字。</p>

<button onclick="myFunction()">试一试</button>

<p id="demo"></p>

<script>
function myFunction() {
  var str = "abc 123 bb f";
  var patt1 = /\s/g;
  var result = str.match(patt1);
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>//将会显示两个，
注意：上面例子中有3个空格，但是会默认减去一个。

\b	匹配单词边界。	
例子：
<!DOCTYPE html>
<html>
<body>

<p>单击按钮可在字符串中单词的开头或结尾处对“W3”进行全局搜索。</p>

<button onclick="myFunction()">试一试</button>

<p id="demo"></p>

<script>
function myFunction() {
  var str = "Visit W3Schools"; 
  var patt1 = /\bW3/g;
  var result = str.match(patt1);
  document.getElementById("demo").innerHTML = result;
}
</script>

</body>
</html>//W3

\uxxxx	查找以十六进制数 xxxx 规定的 Unicode 字符。


9.使用 RegExp 对象
在 JavaScript 中，RegExp 对象是带有预定义属性和方法的正则表达式对象。


10.test()对象。
使用 test()
test() 是一个正则表达式方法。

它通过模式来搜索字符串，然后根据结果返回 true 或 false。

下面的例子搜索字符串中的字符 "e"：

实例
var patt = /g/;
patt.test("The best things in life are free!"); 
由于字符串中有一个 "e"，以上代码的输出将是：true
fan
true