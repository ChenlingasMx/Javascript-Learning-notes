JavaScript 位运算符
1.JavaScript 位运算符
运算符	名称		描述
&	AND		如果两位都是 1 则设置每位为 1
|	OR		如果两位之一为 1 则设置每位为 1
^	XOR		如果两位只有一位为 1 则设置每位为 1
~	NOT		反转所有位
<<	零填充左位移	通过从右推入零向左位移，并使最左边的位脱落。
>>	有符号右位移	通过从左推入最左位的拷贝来向右位移，并使最右边的位脱落。
>>>	零填充右位移	通过从左推入零来向右位移，并使最右边的位脱落。


实例
操作	结果	  等同于	结果
5 & 1	1	0101 & 0001	0001
5 | 1	5	0101 | 0001	0101
5 ^ 1	4	0101 ^ 0001	0100
~ 5	10	~0101	1010
5 << 1	10	0101 << 1	1010
5 >> 1	2	0101 >> 1	0010
5 >>> 1	2	0101 >>> 1	0010

2.JavaScript 使用 32 位按位运算数
JavaScript 将数字存储为 64 位浮点数，但所有按位运算都以 32 位二进制数执行。

在执行位运算之前，JavaScript 将数字转换为 32 位有符号整数。

执行按位操作后，结果将转换回 64 位 JavaScript 数。

上面的例子使用 4 位无符号二进制数。所以 ~ 5 返回 10。

由于 JavaScript 使用 32 位有符号整数，JavaScript 将返回 -6。

00000000000000000000000000000101 (5)

11111111111111111111111111111010 (~5 = -6)

有符号整数使用最左边的位作为减号。

3.位运算 AND：取小
当对一对数位执行位运算 AND 时，如果数位均为 1 则返回 1。

单位示例：
运算	结果
0 & 0	0
0 & 1	0
1 & 0	0
1 & 1	1
四位示例：
运算	结果
1111 & 0000	0000
1111 & 0001	0001
1111 & 0010	0010
1111 & 0100	0100
例子：
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript 位运算 AND</h2>

<p id="demo">我的第一个段落。</p>

<script>
document.getElementById("demo").innerHTML = 5 & 1;
</script>

</body>
</html> //1


4.位运算 OR：取大
当对一对数位执行位运算 OR 时，如果其中一位是 1 则返回 1：

单位示例
运算	结果
0 | 0	0
0 | 1	1
1 | 0	1
1 | 1	1
四位运算：
操作	结果
1111 | 0000	1111
1111 | 0001	1111
1111 | 0010	1111
1111 | 0100	1111
例子：
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript 位运算 OR</h2>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 | 1;
</script>

</body>
</html>//5


5.位运算 XOR：取中间
当对一对数位进行位运算 XOR 时，如果数位是不同的则返回 1：

单位示例：
运算	结果
0 ^ 0	0
0 ^ 1	1
1 ^ 0	1
1 ^ 1	0
四位示例：
运算	结果
1111 ^ 0000	1111
1111 ^ 0001	1110
1111 ^ 0010	1101
1111 ^ 0100	1011
例子
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript 位运算 XOR</h2>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 ^ 1;
</script>

</body>
</html>//4

